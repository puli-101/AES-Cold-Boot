#ifndef _RESOLUTION_HANDLER_H_
#define _RESOLUTION_HANDLER_H_

#include <stdint.h>
#include "aes.h"
#include "util.h"

#define SCALE 1         //scale factor while looking for a solution (1 : we look through all subkeys, 0 we don't look through any, etc..)
#define BLOCK_SIZE 4    //size in bytes of each on of the four 4-byte-long blocks that define the first round key 
#define NB_BLOCKS 4     //number of 32-bit blocks that define the first round key
#define SUB_SCHED_SIZE (int)(BLOCK_SIZE * ROUNDS * 8 * SCALE) //size of a subschedule in bits

//Calculates the hamming distance between a subschedule 
//i.e. the slice of an alternative key schedule generated by 4 contiguous bytes, and
//the corresponding subschedule from the originally extracted key schedule 
//index : {0,1,2,3} refers to the word number in the first round of the alternative schedule
int calc_diff(uint8_t subschedule[ROUNDS][BLOCK_SIZE], uint8_t grid[ROUNDS][NB_BYTES], int offset);

//Given an index of one of the 4 blocks that make up the key schedule
//and a subschedule that has just the first sub round key filled out
//we calculate the rest of the sub round keys of the corresponding slice
void calc_subschedule(uint8_t subschedule[ROUNDS][BLOCK_SIZE], int index);

//Z-score : (X-E[X])/sqrt(V(X))
static inline double z_score(int diff, double expected_value, double std_deviation) {
    return abs_double((((double)diff) - expected_value) / std_deviation);
}

#endif